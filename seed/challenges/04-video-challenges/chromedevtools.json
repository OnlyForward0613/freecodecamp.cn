{
  "name": "Chrome Developer Tools",
  "order": 3,
  "time": "1 hour",
  "challenges": [
    {
      "id": "56b15f15632298c12f315184",
      "title": "Chrome Dev Tools: Elements",
      "description": [
        "这个课程只对 Chrome 开发工具中的Elements(元素)标签做基本介绍,更多详细介绍请点击: <a href='http://developers.google.com/web/tools/iterate/inspect-styles/basics' target='_blank'>developers.google.com/web/tools/iterate/inspect-styles/basics</a>",
        "我们接下来会在每个小节中中使用Free Code Camp用户kmiasko的网站 mckellen.com/ 来做演示。",
        "在chrome浏览器中右击选中'Inspect element'即可访问elements标签，然后你就可以随便修改元素文本，元素标签和任何其他CSS或者HTML。",
        "这些修改不会自动保存，不能当做IDE或者可以保存内容的编辑器。你可以使用chrome中的'persistent authoring'功能去保存更改。",
        "记住这里层叠，继承和其他CSS规则都可以使用，另外，被覆盖的式样会以穿越文字的横线的形式展示。",
        "需要注意的是现在\"树\"中看到的代码是当前的HTML，而不是页面加载时的代码。如果你用JavaScript或Jquery来改变页面元素，\"树\"就会更新。",
        "Padding，border和margin都很容易在右下角的彩色盒子里面检查和编辑。",
        "更多详细内容请访问Chrome开发工具文档<a href='http://developers.google.com/web/tools/chrome-devtools/' target='_blank'>http://developers.google.com/web/tools/chrome-devtools/</a>a>"
      ],
      "challengeSeed": [
        "137186237"
      ],
      "tests": [
        [
          "你应该使用elements标签页去编辑现有网页的HTML和CSS。",
          true
        ],
        [
          "在elements标签页中所做的更改都会保存，可以当做编辑器。",
          false,
          "编辑都是临时的，如果你想要对代码进行更改，记得写到你自己的文档而中不至于丢失。"
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f315183",
      "title": "Chrome Dev Tools: Network",
      "description": [
        "network标签页是用来回答'页面中哪个部分最耗时间'或'哪个调用初始化了网络请求'",
        "network仪表盘记录了页面中每个元素加载的详细信息。",
        "每一个请求都记录在network仪表盘的底部日志中",
        "观察底部的线条，你会注意到彩色图案。每一个颜色都代表了请求中的不同类型内容。",
        "线越长代表网络耗时越大，我们最终目标就是缩短线长。如果出现长线条，说明某些内容拖慢了整个网页。",
        "点击请求日志，会看到更加详细的请求信息。",
        "更多详细内容请访问: <a href='http://developers.google.com/web/tools/profile-performance/network-performance/resource-loading' target='_blank'>developers.google.com/web/tools/profile-performance/network-performance/resource-loading</a>"
      ],
      "challengeSeed": [
        "137187539"
      ],
      "tests": [
        [
          "Network标签页可以用来判断发生了那些请求及其耗时",
          true
        ],
        [
          "和很多Chrome开发者工具中的标签一样，有很多种形式来观察和使用Chrome提供的信息",
          true
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f315182",
      "title": "Chrome Dev Tools: Sources",
      "description": [
        "Sources标签页对调试JavaScript帮助很大。项目越大，越难准确找到问题所在。",
        "可以对代码的不同部分设置断点，代码会到此停止执行。",
        "有很多种断点类型可以使用，如一行特定代码，一个DOM事件，XMLHTTP请求或一个JavaScript事件。",
        "设置好断电之后，浏览器在进入这段代码或事件时，会暂停执行。",
        "通过减缓代码执行，我们就有机会仔细观察每一个设置点，准确跟踪页面行为。",
        "一旦断点设置好，我们就可以逐步浏览和检查页面中断点处的代码。",
        "和elements标签一样，可以实时编辑代码观察结果，不过记得在别处保存更改。",
        "更多详细内容请访问: <a href='http://developers.google.com/web/tools/javascript/breakpoints/' target='_blank'>developers.google.com/web/tools/javascript/breakpoints/</a>"
      ],
      "challengeSeed": [
        "137188025"
      ],
      "tests": [
        [
          "可以很容易通过Chrome开发者工具进行代码调试。",
          true
        ],
        [
          "断点是事先设置好的，但是你可以设置其在代码中的位置。",
          false,
          "需要在调试中设置所有断点。"
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f315181",
      "title": "Chrome Dev Tools: Timeline",
      "description": [
        "Timeline 面板可以在应用运行时记录和分析所有行为。此处最适合分析应用性能问题。",
        "就像通过network标签找出时间耗费，通过sources标签找出有问题的代码一样，通过Timeline可以观察到更多详细细节。",
        "使用点击timeline的圆形按钮，你可以记录（捕获）堆栈，js性能，内存和图形绘制(CSS)等信息。",
        "chrome会以小粒度的详细日志来展现这些信息，可以通过很多种形式来查看。",
        "所有这些信息可以帮助你很好地理解浏览器中发生的行为，尤其是发现内存占用比较多的事件。",
        "在加载新页面之前记得先点击'clear'按钮再开始记录。",
        "当记录JS事件时，点击title或左侧的'function call'，会重定向到resource标签，同时定位到函数所在位置的代码行。",
        "更多详细内容请访问: <a href='http://developers.google.com/web/tools/profile-performance/evaluate-performance/timeline-tool' target='_blank'>developers.google.com/web/tools/profile-performance/evaluate-performance/timeline-tool</a>"
      ],
      "challengeSeed": [
        "137188786"
      ],
      "tests": [
        [
          "Timeline标签页记录API返回信息所需时间。",
          false,
          "Timeline标签页最好用于速度和内存使用的性能问题分析。"
        ],
        [
          "使用Timeline标签页时，需要点击'record'按钮来记录信息。",
          true
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f315180",
      "title": "Chrome Dev Tools: Profiles",
      "description": [
        "Profiles 面板可以提供web应用或页面的执行时间和内存，主要是针对运行于页面或app上的JavaScript。",
        "这里可以收集到3种类型的概述信息: CPU profile，HEAP snapshot和HEAP profile。HEAP profiles更多的和内存使用信息相关，CPU profile和JavaScript性能相关。",
        "V8分析器可以帮助定位JavaScript中的性能问题，有助于优化代码。",
        "每一个profile都可以在左侧查看，可以对每个页面采集多个profile。总体而言，profiles标签页非常适合优化代码。",
        "更多详细内容请访问：<a href='http://developers.google.com/web/tools/profile-performance/rendering-tools/js-execution' target='_blank'>developers.google.com/web/tools/profile-performance/rendering-tools/js-execution</a>"
      ],
      "challengeSeed": [
        "137189330"
      ],
      "tests": [
        [
          "采集的profile或快照信息只能以一种展现形式查看。",
          false,
          "和其他Chrome开发工具一样，有很多种展现形式来理解信息。"
        ],
        [
          "点击'record'后，针对你需要捕获的页面进行刷新。",
          true
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f31517f",
      "title": "Chrome Dev Tools: Resources",
      "description": [
        "Resources 面板可以显示已经加载的资源，包括： IndexedDB，Web SQL数据库，local storage，session storage，cookies，Application Cache, 图片, 字体和样式表。",
        "可以在浏览器中查看和修改所有这些信息。",
        "当你进行高级网站构建时，resources 面板可以帮你更好的理解app和页面的实时性要求。",
        "更多详细内容请访问：<a href='http://developers.google.com/web/tools/iterate/manage-data/index' target='_blank'>developers.google.com/web/tools/iterate/manage-data/index</a>"
      ],
      "challengeSeed": [
        "137193676"
      ],
      "tests": [
        [
          "Resources 标签中可以查看外部资源，如：SQL和cookies",
          true
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f31517e",
      "title": "Chrome Dev Tools: Audits",
      "description": [
        "The Audit tool walks you through how to improve your page step by step.",
        "In this video, we use this tool on the quote generator that I made as a front end development project.",
        "The suggestions you'd get using the Audit tool are generated automatically.",
        "This is important to keep in mind so you can contextualize them with your other knowledge of your site.",
        "Sometimes, it might be right, but sometimes, for your situation it might be wrong.",
        "Use this tool when you want to improve your site or app, but you aren't sure where to start."
      ],
      "challengeSeed": [
        "137194227"
      ],
      "tests": [
        [
          "The Audit tab will suggest ways to improve a webpage.",
          true
        ],
        [
          "While you don't NEED to do everything suggested, you probably should.",
          false,
          "If you don't understand an error or suggestion, do more research before making major changes."
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f31517d",
      "title": "Chrome Dev Tools: Console",
      "description": [
        "The Console panel provides two primary functions: logging diagnostic information in the development process and providing a shell prompt which can be used to interact with the document and Dev Tools.",
        "When using the console, you can view raw or structured data by using standard JS statements and console-specific commands.",
        "An example of structured data would be the information returned from an API in JSON. I used this a lot when I was building my first front end development projects for Free Code Camp.",
        "You should know that messages stack up, and you can clear them by typing and entering 'clear()'. You can also save the log by selecting 'Preserve Log'.",
        "There are different commands that will log differently, like console.log() for basic logging, console.error() & console.warn() for 'eye catching stuff'.",
        "The console can track exceptions, which basically means when something goes wrong. It can even pause the code during those exceptions, a function that you might remember from the 'Source' tab.",
        "Check out more in-depth documentation here: <a href='http://developers.google.com/web/tools/javascript/console/' target='_blank'>developers.google.com/web/tools/javascript/console/</a>"
      ],
      "challengeSeed": [
        "137194773"
      ],
      "tests": [
        [
          "The console in Chrome Dev Tools has many similarities to the console of a computer.",
          true
        ],
        [
          "This video is in-depth and covers everything you need to know.",
          false,
          "Please review the documentation linked in the description."
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f31517c",
      "title": "Chrome Dev Tools: Summary",
      "description": [
        "1.) Chrome Dev Tools are awesome, and the more you can dive in and try to use them, the faster your skill level will grow.",
        "2.) Use the documentation, even if you've never read documentation before: <a href='http://developers.google.com/web/tools/chrome-devtools/' target='_blank'>developers.google.com/web/tools/chrome-devtools/</a>",
        "3.) Once you start to get comfortable in one tab, stretch yourself. Working effectively with all of the tabs will serve you exponentially more than sticking in your comfort zone."
      ],
      "challengeSeed": [
        "137196041"
      ],
      "tests": [
        [
          "Device mode allows you to view your page in different sizes of screens with different network connections.",
          true
        ]
      ],
      "type": "hike",
      "challengeType": 6
    }
  ]
}
